// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package example

import (
	"log"
	"sync/atomic"
	"unsafe"
)

// Google Public DNS provides two distinct DoH APIs at these endpoints
// Using the GET method can reduce latency, as it is cached more effectively.
// RFC 8484 GET requests must have a ?dns= query parameter with a Base64Url encoded DNS message. The GET method is the only method supported for the JSON API.

// Config should use NewFuncNameSpecified to initialize it
type Config struct {
	TestMapIntInt map[int]int `xconf:"test_map_int_int"`
	SpecSub       *spec       `xconf:"spec_sub"` // annotation@SpecSub(getter="SpecVisitor")
	// test comment 1
	// annotation@TestNil(option="WithTTTTTTTT")
	TestNil             interface{}       `xconf:"test_nil"` // test comment 3
	TestSliceInt        []int             `xconf:"test_slice_int"`
	TestSliceInt64      []int64           `xconf:"test_slice_int64"`
	TestSliceString     []string          `xconf:"test_slice_string"`
	TestSliceBool       []bool            `xconf:"test_slice_bool"`
	TestSliceIntNil     []int             `xconf:"test_slice_int_nil"`
	TestSliceByte       []byte            `xconf:"test_slice_byte"`
	TestSliceIntEmpty   []int             `xconf:"test_slice_int_empty"`
	TestHTTPPort        string            `xconf:"test_http_port"`
	TestEmptyMap        map[int]int       `xconf:"test_empty_map"`
	TestInt64           int64             `xconf:"test_int64"`
	TestInt             int               `xconf:"test_int" usage:"这里是函数注释1,\"test\" , 这里是函数注释2"`
	TestMapIntString    map[int]string    `xconf:"test_map_int_string"`
	TestMapStringString map[string]string `xconf:"test_map_string_string"`
	TestString          string            `xconf:"test_string"`
	Food                *string           `xconf:"food"`
	Walk                func()            `xconf:"walk"`
	TestNilFunc         func()            `xconf:"test_nil_func"` // 中文1
	SubTest             *SubTest          `xconf:"sub_test"`
	TestMapStringInt    map[string]int    `xconf:"test_map_string_int"`
	// annotation@TestProtected(private="true")
	TestProtected []byte `xconf:"test_protected"`
	// annotation@fOO(inline="true")
	*FOO `xconf:"f_oo"`
	// annotation@Paths(inline="true")
	Paths `xconf:"paths"`
	// annotation@TestParamterBool(arg=1)
	TestParamterBool bool `xconf:"test_paramter_bool"` // reserved parameter 1
	// annotation@TestParamterStr(arg=22)
	TestParamterStr string `xconf:"test_paramter_str"` // reserved parameter 2
}

// NewFuncNameSpecified new Config
func NewFuncNameSpecified(testParamterBool bool, testParamterStr string, opts ...ConfigOption) ConfigInterface {
	cc := newDefaultConfig()
	cc.TestParamterBool = testParamterBool
	cc.TestParamterStr = testParamterStr
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogConfig != nil {
		watchDogConfig(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Config) ApplyOption(opts ...ConfigOption) []ConfigOption {
	var previous []ConfigOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// ConfigOption option func
type ConfigOption func(cc *Config) ConfigOption

// WithTestMapIntInt option func for filed TestMapIntInt
func WithTestMapIntInt(v map[int]int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapIntInt
		cc.TestMapIntInt = v
		return WithTestMapIntInt(previous)
	}
}

// WithSpecSub option func for filed SpecSub
func WithSpecSub(v *spec) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.SpecSub
		cc.SpecSub = v
		return WithSpecSub(previous)
	}
}

// WithTTTTTTTT option func for filed TestNil
func WithTTTTTTTT(v interface{}) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestNil
		cc.TestNil = v
		return WithTTTTTTTT(previous)
	}
}

// WithTestSliceInt option func for filed TestSliceInt
func WithTestSliceInt(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceInt
		cc.TestSliceInt = v
		return WithTestSliceInt(previous...)
	}
}

// AppendTestSliceInt append func for filed TestSliceInt
func AppendTestSliceInt(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceInt
		cc.TestSliceInt = append(cc.TestSliceInt, v...)
		return WithTestSliceInt(previous...)
	}
}

// WithTestSliceInt64 option func for filed TestSliceInt64
func WithTestSliceInt64(v ...int64) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceInt64
		cc.TestSliceInt64 = v
		return WithTestSliceInt64(previous...)
	}
}

// AppendTestSliceInt64 append func for filed TestSliceInt64
func AppendTestSliceInt64(v ...int64) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceInt64
		cc.TestSliceInt64 = append(cc.TestSliceInt64, v...)
		return WithTestSliceInt64(previous...)
	}
}

// WithTestSliceString option func for filed TestSliceString
func WithTestSliceString(v ...string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceString
		cc.TestSliceString = v
		return WithTestSliceString(previous...)
	}
}

// AppendTestSliceString append func for filed TestSliceString
func AppendTestSliceString(v ...string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceString
		cc.TestSliceString = append(cc.TestSliceString, v...)
		return WithTestSliceString(previous...)
	}
}

// WithTestSliceBool option func for filed TestSliceBool
func WithTestSliceBool(v ...bool) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceBool
		cc.TestSliceBool = v
		return WithTestSliceBool(previous...)
	}
}

// AppendTestSliceBool append func for filed TestSliceBool
func AppendTestSliceBool(v ...bool) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceBool
		cc.TestSliceBool = append(cc.TestSliceBool, v...)
		return WithTestSliceBool(previous...)
	}
}

// WithTestSliceIntNil option func for filed TestSliceIntNil
func WithTestSliceIntNil(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceIntNil
		cc.TestSliceIntNil = v
		return WithTestSliceIntNil(previous...)
	}
}

// AppendTestSliceIntNil append func for filed TestSliceIntNil
func AppendTestSliceIntNil(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceIntNil
		cc.TestSliceIntNil = append(cc.TestSliceIntNil, v...)
		return WithTestSliceIntNil(previous...)
	}
}

// WithTestSliceByte option func for filed TestSliceByte
func WithTestSliceByte(v []byte) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceByte
		cc.TestSliceByte = v
		return WithTestSliceByte(previous)
	}
}

// WithTestSliceIntEmpty option func for filed TestSliceIntEmpty
func WithTestSliceIntEmpty(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceIntEmpty
		cc.TestSliceIntEmpty = v
		return WithTestSliceIntEmpty(previous...)
	}
}

// AppendTestSliceIntEmpty append func for filed TestSliceIntEmpty
func AppendTestSliceIntEmpty(v ...int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestSliceIntEmpty
		cc.TestSliceIntEmpty = append(cc.TestSliceIntEmpty, v...)
		return WithTestSliceIntEmpty(previous...)
	}
}

// WithTestHTTPPort option func for filed TestHTTPPort
func WithTestHTTPPort(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestHTTPPort
		cc.TestHTTPPort = v
		return WithTestHTTPPort(previous)
	}
}

// WithTestEmptyMap option func for filed TestEmptyMap
func WithTestEmptyMap(v map[int]int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestEmptyMap
		cc.TestEmptyMap = v
		return WithTestEmptyMap(previous)
	}
}

// WithTestInt64 option func for filed TestInt64
func WithTestInt64(v int64) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestInt64
		cc.TestInt64 = v
		return WithTestInt64(previous)
	}
}

// WithTestInt 这里是函数注释1,"test",这里是函数注释2
func WithTestInt(v int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestInt
		cc.TestInt = v
		return WithTestInt(previous)
	}
}

// WithTestMapIntString option func for filed TestMapIntString
func WithTestMapIntString(v map[int]string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapIntString
		cc.TestMapIntString = v
		return WithTestMapIntString(previous)
	}
}

// WithTestMapStringString option func for filed TestMapStringString
func WithTestMapStringString(v map[string]string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapStringString
		cc.TestMapStringString = v
		return WithTestMapStringString(previous)
	}
}

// WithTestString option func for filed TestString
func WithTestString(v string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestString
		cc.TestString = v
		return WithTestString(previous)
	}
}

// WithFood option func for filed Food
func WithFood(v *string) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.Food
		cc.Food = v
		return WithFood(previous)
	}
}

// WithWalk option func for filed Walk
func WithWalk(v func()) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.Walk
		cc.Walk = v
		return WithWalk(previous)
	}
}

// WithTestNilFunc option func for filed TestNilFunc
func WithTestNilFunc(v func()) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestNilFunc
		cc.TestNilFunc = v
		return WithTestNilFunc(previous)
	}
}

// WithSubTest option func for filed SubTest
func WithSubTest(v *SubTest) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.SubTest
		cc.SubTest = v
		return WithSubTest(previous)
	}
}

// WithTestMapStringInt option func for filed TestMapStringInt
func WithTestMapStringInt(v map[string]int) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.TestMapStringInt
		cc.TestMapStringInt = v
		return WithTestMapStringInt(previous)
	}
}

// WithFOO option func for filed FOO
func WithFOO(v *FOO) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.FOO
		cc.FOO = v
		return WithFOO(previous)
	}
}

// WithPaths option func for filed Paths
func WithPaths(v Paths) ConfigOption {
	return func(cc *Config) ConfigOption {
		previous := cc.Paths
		cc.Paths = v
		return WithPaths(previous)
	}
}

// InstallConfigWatchDog the installed func will called when NewFuncNameSpecified  called
func InstallConfigWatchDog(dog func(cc *Config)) { watchDogConfig = dog }

// watchDogConfig global watch dog
var watchDogConfig func(cc *Config)

// setConfigDefaultValue default Config value
func setConfigDefaultValue(cc *Config) {
	cc.TestProtected = nil
	cc.TestParamterBool = false
	cc.TestParamterStr = ""
	for _, opt := range [...]ConfigOption{
		WithTestMapIntInt(map[int]int{1: 1, 2: 2, 3: 3}),
		WithSpecSub(NewSpec()),
		WithTTTTTTTT(nil),
		WithTestSliceInt([]int{1, 2, 3}...),
		WithTestSliceInt64([]int64{1, 2, 3}...),
		WithTestSliceString([]string{"test1", "test2"}...),
		WithTestSliceBool([]bool{false, true}...),
		WithTestSliceIntNil(nil...),
		WithTestSliceByte(nil),
		WithTestSliceIntEmpty(make([]int, 0)...),
		WithTestHTTPPort(""),
		WithTestEmptyMap(make(map[int]int, 0)),
		WithTestInt64(32),
		WithTestInt(32),
		WithTestMapIntString(map[int]string{1: "test"}),
		WithTestMapStringString(map[string]string{"test": "test"}),
		WithTestString("Meow"),
		WithFood(nil),
		WithWalk(func() {
			log.Println("Walking")
		}),
		WithTestNilFunc(nil),
		WithSubTest(&SubTest{}),
		WithTestMapStringInt(map[string]int{"test": 1}),
		WithFOO(nil),
		WithPaths(Paths{}),
	} {
		opt(cc)
	}
}

// newDefaultConfig new default Config
func newDefaultConfig() *Config {
	cc := &Config{}
	setConfigDefaultValue(cc)
	return cc
}

// AtomicSetFunc used for XConf
func (cc *Config) AtomicSetFunc() func(interface{}) { return AtomicConfigSet }

// atomicConfig global *Config holder
var atomicConfig unsafe.Pointer

// onAtomicConfigSet global call back when  AtomicConfigSet called by XConf.
// use ConfigInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicConfig
var onAtomicConfigSet func(cc ConfigInterface) bool

// InstallCallbackOnAtomicConfigSet install callback
func InstallCallbackOnAtomicConfigSet(callback func(cc ConfigInterface) bool) {
	onAtomicConfigSet = callback
}

// AtomicConfigSet atomic setter for *Config
func AtomicConfigSet(update interface{}) {
	cc := update.(*Config)
	if onAtomicConfigSet != nil && !onAtomicConfigSet(cc) {
		return
	}
	atomic.StorePointer(&atomicConfig, (unsafe.Pointer)(cc))
}

// AtomicConfig return atomic *ConfigVisitor
func AtomicConfig() ConfigVisitor {
	current := (*Config)(atomic.LoadPointer(&atomicConfig))
	if current == nil {
		defaultOne := newDefaultConfig()
		if watchDogConfig != nil {
			watchDogConfig(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicConfig, nil, (unsafe.Pointer)(defaultOne))
		return (*Config)(atomic.LoadPointer(&atomicConfig))
	}
	return current
}

// all getter func
func (cc *Config) GetTestMapIntInt() map[int]int             { return cc.TestMapIntInt }
func (cc *Config) GetSpecSub() SpecVisitor                   { return cc.SpecSub }
func (cc *Config) GetTestNil() interface{}                   { return cc.TestNil }
func (cc *Config) GetTestSliceInt() []int                    { return cc.TestSliceInt }
func (cc *Config) GetTestSliceInt64() []int64                { return cc.TestSliceInt64 }
func (cc *Config) GetTestSliceString() []string              { return cc.TestSliceString }
func (cc *Config) GetTestSliceBool() []bool                  { return cc.TestSliceBool }
func (cc *Config) GetTestSliceIntNil() []int                 { return cc.TestSliceIntNil }
func (cc *Config) GetTestSliceByte() []byte                  { return cc.TestSliceByte }
func (cc *Config) GetTestSliceIntEmpty() []int               { return cc.TestSliceIntEmpty }
func (cc *Config) GetTestHTTPPort() string                   { return cc.TestHTTPPort }
func (cc *Config) GetTestEmptyMap() map[int]int              { return cc.TestEmptyMap }
func (cc *Config) GetTestInt64() int64                       { return cc.TestInt64 }
func (cc *Config) GetTestInt() int                           { return cc.TestInt }
func (cc *Config) GetTestMapIntString() map[int]string       { return cc.TestMapIntString }
func (cc *Config) GetTestMapStringString() map[string]string { return cc.TestMapStringString }
func (cc *Config) GetTestString() string                     { return cc.TestString }
func (cc *Config) GetFood() *string                          { return cc.Food }
func (cc *Config) GetWalk() func()                           { return cc.Walk }
func (cc *Config) GetTestNilFunc() func()                    { return cc.TestNilFunc }
func (cc *Config) GetSubTest() *SubTest                      { return cc.SubTest }
func (cc *Config) GetTestMapStringInt() map[string]int       { return cc.TestMapStringInt }
func (cc *Config) GetTestProtected() []byte                  { return cc.TestProtected }
func (cc *Config) GetFOO() *FOO                              { return cc.FOO }
func (cc *Config) GetPaths() Paths                           { return cc.Paths }
func (cc *Config) GetTestParamterBool() bool                 { return cc.TestParamterBool }
func (cc *Config) GetTestParamterStr() string                { return cc.TestParamterStr }

// ConfigVisitor visitor interface for Config
type ConfigVisitor interface {
	GetTestMapIntInt() map[int]int
	GetSpecSub() SpecVisitor
	GetTestNil() interface{}
	GetTestSliceInt() []int
	GetTestSliceInt64() []int64
	GetTestSliceString() []string
	GetTestSliceBool() []bool
	GetTestSliceIntNil() []int
	GetTestSliceByte() []byte
	GetTestSliceIntEmpty() []int
	GetTestHTTPPort() string
	GetTestEmptyMap() map[int]int
	GetTestInt64() int64
	GetTestInt() int
	GetTestMapIntString() map[int]string
	GetTestMapStringString() map[string]string
	GetTestString() string
	GetFood() *string
	GetWalk() func()
	GetTestNilFunc() func()
	GetSubTest() *SubTest
	GetTestMapStringInt() map[string]int
	GetTestProtected() []byte
	GetFOO() *FOO
	GetPaths() Paths
	GetTestParamterBool() bool
	GetTestParamterStr() string
}

// ConfigInterface visitor + ApplyOption interface for Config
type ConfigInterface interface {
	ConfigVisitor
	ApplyOption(...ConfigOption) []ConfigOption
}
