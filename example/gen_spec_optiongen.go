// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package example

import (
	"sync/atomic"
	"unsafe"
)

// HTTP parsing and communication with DNS resolver was successful, and the response body content is a DNS response in either binary or JSON encoding,
// depending on the query endpoint, Accept header and GET parameters.

// spec should use NewSpec to initialize it
type spec struct {
	// test comment 5
	// test comment 6
	// annotation@TestNil1(comment="method commnet", private="true", xconf="test_nil1",tag_json=",omitempty")
	TestNil1       interface{} `xconf:"test_nil1" json:",omitempty"` // test comment 1
	TestBool1      bool        `xconf:"test_bool1"`                  // test comment 2
	TestInt1       int         `xconf:"test_int1"`
	TestNilFunc1   func()      `xconf:"test_nil_func1"`  // 中文2
	TestReserved2_ []byte      `xconf:"test_reserved2_"` // sql.DB对外暴露出了其运行时的状态db.DBStats，sql.DB在关闭，创建，释放连接时候，会维护更新这个状态。
	// 我们可以通过prometheus来收集连接池状态，然后在grafana面板上配置指标，使指标可以动态的展示。
	TestReserved2Inner1 int `xconf:"test_reserved2_inner1"`
}

// NewSpec new spec
func NewSpec(opts ...SpecOption) *spec {
	cc := newDefaultSpec()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogSpec != nil {
		watchDogSpec(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *spec) ApplyOption(opts ...SpecOption) {
	for _, opt := range opts {
		opt(cc)
	}
}

// SpecOption option func
type SpecOption func(cc *spec)

// WithServerTestBool1 option func for filed TestBool1
func WithServerTestBool1(v bool) SpecOption {
	return func(cc *spec) {
		cc.TestBool1 = v
	}
}

// WithServerTestInt1 这里是函数注释3,这里是函数注释4
func WithServerTestInt1(v int) SpecOption {
	return func(cc *spec) {
		cc.TestInt1 = v
	}
}

// WithServerTestNilFunc1 option func for filed TestNilFunc1
func WithServerTestNilFunc1(v func()) SpecOption {
	return func(cc *spec) {
		cc.TestNilFunc1 = v
	}
}

// WithServerTestReserved2Inner1 option func for filed TestReserved2Inner1
func WithServerTestReserved2Inner1(v int) SpecOption {
	return func(cc *spec) {
		cc.TestReserved2Inner1 = v
	}
}

// InstallSpecWatchDog the installed func will called when NewSpec  called
func InstallSpecWatchDog(dog func(cc *spec)) { watchDogSpec = dog }

// watchDogSpec global watch dog
var watchDogSpec func(cc *spec)

// setSpecDefaultValue default spec value
func setSpecDefaultValue(cc *spec) {
	cc.TestNil1 = nil
	cc.TestReserved2_ = nil
	for _, opt := range [...]SpecOption{
		WithServerTestBool1(false),
		WithServerTestInt1(32),
		WithServerTestNilFunc1(nil),
		WithServerTestReserved2Inner1(1),
	} {
		opt(cc)
	}
}

// newDefaultSpec new default spec
func newDefaultSpec() *spec {
	cc := &spec{}
	setSpecDefaultValue(cc)
	return cc
}

// AtomicSetFunc used for XConf
func (cc *spec) AtomicSetFunc() func(interface{}) { return AtomicSpecSet }

// atomicspec global *spec holder
var atomicSpec unsafe.Pointer

// onAtomicSpecSet global call back when  AtomicSpecSet called by XConf.
// use SpecInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicSpec
var onAtomicSpecSet func(cc SpecInterface) bool

// InstallCallbackOnAtomicSpecSet install callback
func InstallCallbackOnAtomicSpecSet(callback func(cc SpecInterface) bool) { onAtomicSpecSet = callback }

// AtomicSpecSet atomic setter for *spec
func AtomicSpecSet(update interface{}) {
	cc := update.(*spec)
	if onAtomicSpecSet != nil && !onAtomicSpecSet(cc) {
		return
	}
	atomic.StorePointer(&atomicSpec, (unsafe.Pointer)(cc))
}

// AtomicSpec return atomic *SpecVisitor
func AtomicSpec() SpecVisitor {
	current := (*spec)(atomic.LoadPointer(&atomicSpec))
	if current == nil {
		defaultOne := newDefaultSpec()
		if watchDogSpec != nil {
			watchDogSpec(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicSpec, nil, (unsafe.Pointer)(defaultOne))
		return (*spec)(atomic.LoadPointer(&atomicSpec))
	}
	return current
}

// all getter func
func (cc *spec) GetTestNil1() interface{}    { return cc.TestNil1 }
func (cc *spec) GetTestBool1() bool          { return cc.TestBool1 }
func (cc *spec) GetTestInt1() int            { return cc.TestInt1 }
func (cc *spec) GetTestNilFunc1() func()     { return cc.TestNilFunc1 }
func (cc *spec) GetTestReserved2_() []byte   { return cc.TestReserved2_ }
func (cc *spec) GetTestReserved2Inner1() int { return cc.TestReserved2Inner1 }

// SpecVisitor visitor interface for spec
type SpecVisitor interface {
	GetTestNil1() interface{}
	GetTestBool1() bool
	GetTestInt1() int
	GetTestNilFunc1() func()
	GetTestReserved2_() []byte
	GetTestReserved2Inner1() int
}

// SpecInterface visitor + ApplyOption interface for spec
type SpecInterface interface {
	SpecVisitor
	ApplyOption(...SpecOption)
}
